/*
Deployment script for Util

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Util"
:setvar DefaultFilePrefix "Util"
:setvar DefaultDataPath "D:\Data\SQLServer\MSSQL12.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "D:\Data\SQLServer\MSSQL12.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [Logging]...';


GO
CREATE SCHEMA [Logging]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Util.Logging]...';


GO
CREATE ASSEMBLY [Util.Logging]
    AUTHORIZATION [dbo]
    FROM 


GO
ALTER ASSEMBLY [Util.Logging]
    DROP FILE ALL
    ADD FILE FROM  AS N'Util.Logging.pdb';


GO
PRINT N'Creating [Logging].[Log]...';


GO
CREATE TABLE [Logging].[Log] (
    [LogId]                BIGINT           IDENTITY (1, 1) NOT NULL,
    [LogDate]              DATETIME2 (7)    NOT NULL,
    [ServerName]           [sysname]        NOT NULL,
    [SPID]                 INT              NOT NULL,
    [ConnectionId]         UNIQUEIDENTIFIER NOT NULL,
    [DatabaseName]         NVARCHAR (400)   NULL,
    [AppContextInfo]       VARCHAR (128)    NULL,
    [Tag]                  XML              NULL,
    [ObjectID]             INT              NULL,
    [ParentObjectID]       INT              NULL,
    [LogType]              NVARCHAR (20)    NOT NULL,
    [ObjectName]           NVARCHAR (400)   NULL,
    [ParentObjectName]     NVARCHAR (400)   NULL,
    [EndDateTime]          DATETIME2 (7)    NULL,
    [RowsAffected]         INT              NULL,
    [ErrorLine]            INT              NULL,
    [ErrorMessage]         NVARCHAR (MAX)   NULL,
    [AdditionalInfo]       NVARCHAR (MAX)   NULL,
    [DurationMilliseconds] AS               (datediff(millisecond, [LogDate], [EndDateTime])),
    [Status]               AS               (CASE WHEN [EndDateTime] IS NULL THEN 'Running' WHEN [ErrorMessage] IS NOT NULL THEN 'Error' ELSE 'Complete' END),
    [TransactionCount]     INT              NULL,
    [LastSQL]              VARCHAR (MAX)    NULL,
    PRIMARY KEY CLUSTERED ([LogId] ASC)
);


GO
PRINT N'Creating [Logging].[Log].[ncx_Log_ObjectId]...';


GO
CREATE NONCLUSTERED INDEX [ncx_Log_ObjectId]
    ON [Logging].[Log]([ObjectID] ASC);


GO
PRINT N'Creating [Logging].[Log].[ncx_Log_LogDate]...';


GO
CREATE NONCLUSTERED INDEX [ncx_Log_LogDate]
    ON [Logging].[Log]([LogDate] ASC);


GO
PRINT N'Creating [Logging].[LogAppMaster]...';


GO
CREATE TABLE [Logging].[LogAppMaster] (
    [AppContextInfo]      VARCHAR (128) NOT NULL,
    [IsOn]                BIT           NOT NULL,
    [LogAutonomously]     BIT           NOT NULL,
    [InferTag]            BIT           NOT NULL,
    [InferParentObjectId] BIT           NOT NULL,
    [InferLastSQL]        BIT           NOT NULL,
    [InferError]          BIT           NOT NULL,
    [PrintMessages]       BIT           NOT NULL,
    CONSTRAINT [PK_LogAppMaster] PRIMARY KEY CLUSTERED ([AppContextInfo] ASC)
);


GO
PRINT N'Creating [dbo].[Log]...';


GO
CREATE SYNONYM [dbo].[Log] FOR [Logging].[Log];


GO
PRINT N'Creating unnamed constraint on [Logging].[Log]...';


GO
ALTER TABLE [Logging].[Log]
    ADD DEFAULT (getdate()) FOR [LogDate];


GO
PRINT N'Creating unnamed constraint on [Logging].[Log]...';


GO
ALTER TABLE [Logging].[Log]
    ADD DEFAULT (@@servername) FOR [ServerName];


GO
PRINT N'Creating unnamed constraint on [Logging].[Log]...';


GO
ALTER TABLE [Logging].[Log]
    ADD DEFAULT (@@spid) FOR [SPID];


GO
PRINT N'Creating unnamed constraint on [Logging].[Log]...';


GO
ALTER TABLE [Logging].[Log]
    ADD DEFAULT (db_name(db_id())) FOR [DatabaseName];


GO
PRINT N'Creating unnamed constraint on [Logging].[Log]...';


GO
ALTER TABLE [Logging].[Log]
    ADD DEFAULT ('PROCEDURE') FOR [LogType];


GO
PRINT N'Creating [Logging].[CK_Log]...';


GO
ALTER TABLE [Logging].[Log]
    ADD CONSTRAINT [CK_Log] CHECK ([LogType]='LOOP' OR [LogType]='PACKAGE' OR [LogType]='SQL' OR [LogType]='STEP' OR [LogType]='FUNCTION' OR [LogType]='PROCEDURE' OR [LogType]='MODULE' OR [LogType]='APPLICATION' OR [LogType]='PROCESS' OR [LogType]='BATCH' OR [LogType]='ANONYMOUS BLOCK');


GO
PRINT N'Creating [dbo].[DeleteAllAttributes]...';


GO
CREATE SYNONYM [dbo].[DeleteAllAttributes] FOR [Logging].[DeleteAllAttributes];


GO
PRINT N'Creating [dbo].[DeleteAttribute]...';


GO
CREATE SYNONYM [dbo].[DeleteAttribute] FOR [Logging].[DeleteAttribute];


GO
PRINT N'Creating [dbo].[EndLog]...';


GO
CREATE SYNONYM [dbo].[EndLog] FOR [Logging].[EndLog];


GO
PRINT N'Creating [dbo].[GetAttribute]...';


GO
CREATE SYNONYM [dbo].[GetAttribute] FOR [Logging].[GetAttribute];


GO
PRINT N'Creating [dbo].[SetAttribute]...';


GO
CREATE SYNONYM [dbo].[SetAttribute] FOR [Logging].[SetAttribute];


GO
PRINT N'Creating [dbo].[ShowAllAttributes]...';


GO
CREATE SYNONYM [dbo].[ShowAllAttributes] FOR [Logging].[ShowAllAttributes];


GO
PRINT N'Creating [dbo].[StartLog]...';


GO
CREATE SYNONYM [dbo].[StartLog] FOR [Logging].[StartLog];


GO
PRINT N'Creating [Logging].[vwActiveLoggingSessions]...';


GO
 
CREATE VIEW Logging.vwActiveLoggingSessions
AS
SELECT
    --CAST(CONTEXT_INFO() AS VARCHAR(128)) AppContextInfo,
    (SELECT TOP 1 AppContextInfo FROM Log WHERE ConnectionId = ec.connection_id) AppContextInfo,
    ec.*
FROM
    master.sys.dm_exec_connections ec
WHERE
    EXISTS
        (
            SELECT 1
            FROM Log l
            WHERE l.ConnectionId = ec.connection_id
        );
GO
PRINT N'Creating [Logging].[vwLogOfActiveSessions]...';


GO
 
CREATE VIEW Logging.vwLogOfActiveSessions
AS
SELECT
    ec.session_id, ec.connect_time, ec.num_reads, ec.num_writes, ec.last_read, ec.last_write, ec.most_recent_sql_handle,
    l.*
FROM
    Log l
        INNER JOIN master.sys.dm_exec_connections ec
            ON l.ConnectionId = ec.connection_id
GO
PRINT N'Creating [Logging].[vwLogSummaryByLogType]...';


GO
 
CREATE VIEW Logging.vwLogSummaryByLogType
AS
SELECT
    DatabaseName,
    LogType,
    AppContextInfo,
    COUNT(DISTINCT ObjectId) DistinctCount,
    COUNT(1) Executions,
    MIN(LogDate) OldestLog,
    MAX(LogDate) NewestLog,
    SUM(DurationMilliSeconds) TotalExecutionMilliSecs,
    MIN(DurationMilliSeconds) FastestExecutionMilliSecs,
    MAX(DurationMilliSeconds) SlowestExecutionMilliSecs,
    AVG(DurationMilliSeconds) AvgExecutionMilliSecs
FROM Log
GROUP BY
    DatabaseName,
    LogType,
    AppContextInfo;
GO
PRINT N'Creating [Logging].[vwLogSummaryByStep]...';


GO
 
CREATE VIEW Logging.vwLogSummaryByStep
AS
SELECT
    DatabaseName,
    LogType,
    AppContextInfo,
    AdditionalInfo,
    COUNT(1) Executions,
    MIN(LogDate) OldestLog,
    MAX(LogDate) NewestLog,
    MIN(DurationMilliSeconds) FastestExecutionMilliSecs,
    MAX(DurationMilliSeconds) SlowestExecutionMilliSecs,
    AVG(DurationMilliSeconds) AvgExecutionMilliSecs
FROM Log
GROUP BY
    DatabaseName,
    LogType,
    AppContextInfo,
    AdditionalInfo;
GO
PRINT N'Creating [Logging].[vwLogOfActiveSessionLatestEntry]...';


GO
 
CREATE VIEW Logging.vwLogOfActiveSessionLatestEntry
AS
SELECT l.*
FROM
    Log l INNER JOIN
        (
            --Get the latest log by log type for each active connection
            SELECT  MAX(LogId) LogId
            FROM Logging.vwLogOfActiveSessions
            GROUP BY ConnectionId, LogType
         ) latest
    ON l.LogId = latest.LogId;
GO
PRINT N'Creating [Logging].[SetAttribute]...';


GO
 
CREATE PROCEDURE Logging.SetAttribute
    @AttributeName  VARCHAR(100),
    @AttributeValue SQL_VARIANT,
    @AttributeType VARCHAR(25) = 'VARCHAR',         --For convenience only. Conversion is your responsibility.
    @AttributeFormat VARCHAR(100) = NULL                --For convenience only. E.g., store date format
AS
BEGIN
 
-- =============================================================================================
-- Created By: Jana Sattainathan
-- Create date: Apr 09, 2015
-- Description: Procedure that sets the current value of certain attributes that can be fetched later in other procedures.
--                  Typically used when information cannot be passed into called sub-programs that operate independently but values need to be shared.
--                  Please see the information in GetAttribute
-- Usage:
/*
    ---------------
    --Example 1
    ---------------
        Logging.SetAttribute @AttributeName='TEST', @AttributeValue='DAFSFASFSA', @AttributeType='VARCHAR', @AttributeFormat=NULL;
        SELECT * FROM ##TempAttributesTable;
 
*/
-- ================================================================================================
 
    --Create a temp table to hold the values
    IF object_id('TEMPDB.DBO.##TempAttributesTable') IS NULL
    BEGIN
        CREATE TABLE ##TempAttributesTable
            (
                [ConnectionId] UNIQUEIDENTIFIER NOT NULL,
                [Name]  VARCHAR(100) NOT NULL,
                [Value] SQL_VARIANT,
                [Type] VARCHAR(25),
                [Format]  VARCHAR(100),
                [At] DATETIME2 NOT NULL DEFAULT CURRENT_TIMESTAMP
            );
    END;
 
    DECLARE @ConnectionId UNIQUEIDENTIFIER = (
                    SELECT Connection_Id
                    FROM sys.dm_exec_connections
                    WHERE session_id = @@SPID
                    );
 
    --Insert/Update based on whether the attribute exists
    IF EXISTS (
                SELECT *
                FROM ##TempAttributesTable
                WHERE
                    ConnectionId = @ConnectionId
                    AND Name = @AttributeName
            )
    BEGIN
        UPDATE ##TempAttributesTable
        SET
            [Value] = @AttributeValue,
            [Type] = @AttributeType,
            [Format] = @AttributeFormat
        WHERE
            [ConnectionId] = @ConnectionId
            AND [Name] = @AttributeName;
    END
    ELSE
    BEGIN
        INSERT INTO ##TempAttributesTable ([ConnectionId], [Name], [Value], [Type], [Format])
        VALUES (@ConnectionId, @AttributeName, @AttributeValue, @AttributeType, @AttributeFormat);
    END
 
    --PRINT CONVERT(VARCHAR,GETDATE()) + ': Set ' + @AttributeName + ' attribute';
END;
GO
PRINT N'Creating [Logging].[GetAttribute]...';


GO
 
CREATE PROCEDURE Logging.GetAttribute
    @AttributeName  VARCHAR(100),
    @AttributeValue SQL_VARIANT OUTPUT,
    @AttributeType VARCHAR(25) OUTPUT,          --For convenience only. Conversion is your responsibility.
    @AttributeFormat VARCHAR(100) OUTPUT,       --For convenience only. E.g., store date format
    @IgnoreIfAttributeIsMissing BIT = 0         --When set to 1, returns NULL's if attributes asked for dont exist
AS
BEGIN
 
-- =============================================================================================
-- Created By: Jana Sattainathan
-- Create date: Apr 09, 2015
-- Description: Procedure that gets the current value of certain attributes that were possibly set in other procedures in this session.
--                  Typically used in conjuction with SetAttribute when information cannot be passed into called sub-programs that operate independently but values need to be shared.
--                  Set attribute values and in the calling proc and used them in called procs with GetAttribute.
-- Usage:
/*
    ---------------
    --Example 1 - Set and Get a simple string that happens to be XML. Need to do conversion yourself. Notice SQL_VARIANT to VARCHAR(200) conversion for @AttributeValue
    ---------------
 
        --Set some attribute in Procedure A.
        -----------------------------------
        DECLARE @Tag VARCHAR(200)= '<TestApplication> ' +
                                        '<ProcessName>Test process</ProcessName>' +
                                        '<LogId>1214</LogId>' +
                                        '<RunNumber>22</RunNumber>' +
                                    '</TestApplication>';
        EXEC Logging.SetAttribute @AttributeName='Tag', @AttributeValue=@Tag, @AttributeType='XML', @AttributeFormat=NULL;
 
        EXEC Logging.ShowAllAttributes;
 
        --Get the value of that attribute in Procedure B
        -----------------------------------
        DECLARE @AttributeName  VARCHAR(100) = 'Tag';
        DECLARE @AttributeValue SQL_VARIANT;
        DECLARE @AttributeType VARCHAR(25);
        DECLARE @AttributeFormat VARCHAR(100);
 
        EXEC Logging.GetAttribute @AttributeName='Tag', @AttributeValue=@AttributeValue OUTPUT, @AttributeType=@AttributeType OUTPUT, @AttributeFormat=@AttributeFormat OUTPUT, @IgnoreIfAttributeIsMissing=1
 
        PRINT @AttributeName;
        PRINT CONVERT(VARCHAR(200), @AttributeValue);
        PRINT @AttributeType;
        PRINT @AttributeFormat;
 
    ---------------
    --Example 1 - Set and Get a simple string but ignore things like type, format etc that we dont care about
    ---------------
 
        --Set some attribute
        -----------------------------------
        DECLARE @Tag VARCHAR(200)= '<TestApplication> ' +
                                        '<ProcessName>Test process</ProcessName>' +
                                        '<LogId>1214</LogId>' +
                                        '<RunNumber>22</RunNumber>' +
                                    '</TestApplication>';
        EXEC Logging.SetAttribute @AttributeName='Log.Tag', @AttributeValue=@Tag, @AttributeType='XML', @AttributeFormat=NULL;
 
        EXEC Logging.ShowAllAttributes;
 
        --Get the value of that attribute in another procedure
        -----------------------------------
        DECLARE @AttributeName  VARCHAR(100) = 'Log.Tag1';
        DECLARE @AttributeValue SQL_VARIANT;
        EXEC Logging.GetAttribute @AttributeName=@AttributeName, @AttributeValue=@AttributeValue OUTPUT, @AttributeType=NULL, @AttributeFormat=NULL, @IgnoreIfAttributeIsMissing=1
 
        PRINT @AttributeName;
        PRINT CONVERT(VARCHAR(200), @AttributeValue);
 
*/
--================================================================================================
    DECLARE @AttributeFetched BIT = 0;
 
    --Create a temp table to hold the values
    IF object_id('TEMPDB.DBO.##TempAttributesTable') IS NOT NULL
    BEGIN
        --Select values out of the global temp table for given attribute
        IF EXISTS (
                    SELECT *
                    FROM ##TempAttributesTable
                    WHERE Name = @AttributeName
                )
        BEGIN
            DECLARE @ConnectionId UNIQUEIDENTIFIER = (
                    SELECT Connection_Id
                    FROM sys.dm_exec_connections
                    WHERE session_id = @@SPID
                    );
 
            IF EXISTS(
                        SELECT *
                        FROM ##TempAttributesTable
                        WHERE
                            ConnectionId = @ConnectionId
                            AND [Name] = @AttributeName
                    )
            BEGIN
                SELECT
                    @AttributeValue = [Value],
                    @AttributeType = [Type],
                    @AttributeFormat = [Format]
                FROM ##TempAttributesTable
                WHERE
                    ConnectionId = @ConnectionId
                    AND [Name] = @AttributeName;
 
                SET @AttributeFetched = 1;
            END;
        END;
    END;
 
    --Raise an error if @IgnoreIfAttributeIsMissing = 0 and attribute to delete does not exist for whatever reason
    IF ((@AttributeFetched = 0) AND (@IgnoreIfAttributeIsMissing = 0))
    BEGIN
        -- RAISERROR with severity 11-19 will cause execution to jump to the CATCH block.
        DECLARE @Msg VARCHAR(200) = 'Attribute ' + @AttributeName + ' does not exist. Cannot get attribute value!'
        RAISERROR (@Msg, -- Message text.
                    16, -- Severity.
                    1 -- State.
                    );
    END;
    ELSE IF (@AttributeFetched = 0)
    BEGIN
        SET @AttributeValue = NULL;
        SET @AttributeType = NULL;
        SET @AttributeFormat = NULL;
    END;
 
    --PRINT CONVERT(VARCHAR,GETDATE()) + ': Get ' + @AttributeName + ' attribute';
END;
GO
PRINT N'Creating [Logging].[DeleteAttribute]...';


GO
 
CREATE PROCEDURE Logging.DeleteAttribute
    @AttributeName  VARCHAR(100),
    @IgnoreIfAttributeIsMissing BIT = 1
AS
BEGIN
 
-- =============================================================================================
-- Created By: Jana Sattainathan
-- Create date: Apr 09, 2015
-- Description: Procedure that deletes one of the attributes.
-- Usage:
/*
    ---------------
    --Example 1
    ---------------
 
        EXEC Logging.SetAttribute @AttributeName='TEST', @AttributeValue='Test value', @AttributeType='VARCHAR', @AttributeFormat=NULL;
 
        EXEC Logging.DeleteAttribute @AttributeName='TEST'
 
        EXEC Logging.ShowAllAttributes
 
*/
-- ================================================================================================
 
    DECLARE @AttributeDeleted BIT = 0;
 
    --Create a temp table to hold the values
    IF object_id('TEMPDB.DBO.##TempAttributesTable') IS NOT NULL
    BEGIN
 
        DECLARE @ConnectionId UNIQUEIDENTIFIER = (
                    SELECT Connection_Id
                    FROM sys.dm_exec_connections
                    WHERE session_id = @@SPID
                    );
 
        --Select values out of the global temp table for given attribute
        IF EXISTS (
                    SELECT *
                    FROM ##TempAttributesTable
                    WHERE
                        ConnectionId = @ConnectionId
                        AND Name = @AttributeName
                )
        BEGIN
 
            IF EXISTS(SELECT *
                        FROM ##TempAttributesTable
                        WHERE
                            ConnectionId = @ConnectionId
                            AND [Name] = @AttributeName)
            BEGIN
                DELETE
                FROM ##TempAttributesTable
                WHERE
                    ConnectionId = @ConnectionId
                    AND [Name] = @AttributeName;
 
                SET @AttributeDeleted = 1;
            END;
        END;
    END;
 
    --Raise an error if @IgnoreIfAttributeIsMissing = 0 and attribute to delete does not exist for whatever reason
    IF ((@AttributeDeleted = 0) AND (@IgnoreIfAttributeIsMissing = 0))
    BEGIN
        -- RAISERROR with severity 11-19 will cause execution to jump to the CATCH block.
        DECLARE @Msg VARCHAR(200) = 'Attribute ' + @AttributeName + ' does not exist. Cannot delete attribute!'
        RAISERROR (@Msg, -- Message text.
                    16, -- Severity.
                    1 -- State.
                    );
    END;
 
    PRINT CONVERT(VARCHAR,GETDATE()) + ': Delete ' + @AttributeName + ' attribute';
END;
GO
PRINT N'Creating [Logging].[ShowAllAttributes]...';


GO
 
CREATE PROCEDURE Logging.ShowAllAttributes
    @ShowGlobal BIT = 0                     --Show the attributes for everyone or just this connection
AS
BEGIN
 
-- =============================================================================================
-- Created By: Jana Sattainathan
-- Create date: Apr 09, 2015
-- Description: Procedure that shows all of the attributes.
-- Usage:
/*
    ---------------
    --Example 1 - Show all the attributes of current connection
    ---------------
 
        EXEC Logging.SetAttribute @AttributeName='TEST', @AttributeValue='Test value', @AttributeType='VARCHAR', @AttributeFormat=NULL;
 
        EXEC Logging.ShowAllAttributes
 
    ---------------
    --Example 2 - Show all the attributes of all connections
    ---------------
 
        EXEC Logging.SetAttribute @AttributeName='TEST', @AttributeValue='Test value', @AttributeType='VARCHAR', @AttributeFormat=NULL;
 
        EXEC Logging.ShowAllAttributes @ShowGlobal = 1
 
*/
-- ================================================================================================
 
    IF object_id('TEMPDB.DBO.##TempAttributesTable') IS NOT NULL
    BEGIN
 
        DECLARE @ConnectionId UNIQUEIDENTIFIER = (
                SELECT Connection_Id
                FROM sys.dm_exec_connections
                WHERE session_id = @@SPID
                );
 
        SELECT *
        FROM ##TempAttributesTable
        WHERE
            ConnectionId = CASE WHEN @ShowGlobal = 1
                                THEN ConnectionId
                                ELSE @ConnectionId
                            END;
    END
    ELSE
    BEGIN
        PRINT CONVERT(VARCHAR,GETDATE()) + ': No attributes exist. SetAttribute has never been called!';
    END;
END;
GO
PRINT N'Creating [Logging].[DeleteAllAttributes]...';


GO
 
CREATE PROCEDURE Logging.DeleteAllAttributes
AS
BEGIN
 
-- =============================================================================================
-- Created By: Jana Sattainathan
-- Create date: Apr 09, 2015
-- Description: Procedure that Deletes all of the attributes of current connection
-- Usage:
/*
    ---------------
    --Example 1 - Delete all the attributes of current connection
    ---------------
 
        EXEC Logging.SetAttribute @AttributeName='TEST', @AttributeValue='Test value', @AttributeType='VARCHAR', @AttributeFormat=NULL;
 
        EXEC Logging.DeleteAllAttributes
 
        EXEC Logging.ShowAllAttributes
*/
-- ================================================================================================
 
    IF object_id('TEMPDB.DBO.##TempAttributesTable') IS NOT NULL
    BEGIN
 
        DECLARE @ConnectionId UNIQUEIDENTIFIER = (
                SELECT Connection_Id
                FROM sys.dm_exec_connections
                WHERE session_id = @@SPID
                );
 
        DELETE
        FROM ##TempAttributesTable
        WHERE
            ConnectionId = @ConnectionId;
    END
    ELSE
    BEGIN
        PRINT CONVERT(VARCHAR,GETDATE()) + ': No attributes exist. SetAttribute has never been called!';
    END;
END;
GO
PRINT N'Creating [Logging].[StartLog]...';


GO
CREATE PROCEDURE [Logging].[StartLog]
    @DatabaseID BIGINT = NULL
    ,@ObjectID BIGINT = NULL
    ,@ParentObjectID BIGINT = NULL
    ,@Tag VARCHAR(MAX) = NULL				--XML not supported on linked server but data is XML data!
    ,@LogType NVARCHAR(20) = 'PROCEDURE'
    ,@RowsAffected INT = NULL
    ,@AdditionalInfo NVARCHAR(MAX) = NULL
    ,@LogID BIGINT = NULL OUTPUT 
    ---------------------------------------
	--Below parameters are needed for "loopback" calls (for logging inside transactions) or calls from another DB
	,@IsLoopback BIT = 0
	,@ServerName NVARCHAR(100) = @@SERVERNAME
	,@SPID INT = @@SPID
	,@ConnectionId UNIQUEIDENTIFIER = NULL
	,@ObjectName NVARCHAR(256) = NULL
	,@ParentObjectName NVARCHAR(256) = NULL
	,@ContextInfo VARBINARY(128) = NULL
	,@LastSQL VARCHAR(MAX) = NULL
	,@ErrorLine INT = NULL
	,@ErrorMessage NVARCHAR(4000) = NULL
	,@TranCount INT = NULL
AS
BEGIN

    -- =============================================================================================
    -- Original Idea By:    Aaron Bertrand
    -- Updated By: Jana Sattainathan [Twitter: @SQLJana] [Blog: sqljana.wordpress.com]
    --              Apr 06, 2014 - Added additional columns ServerName, SID, LogType, Tag, Duration etc
    --                           - Added additional procedure EndLog for tracking begin/end time by closing an existing log entry
    --              Mar 31, 2015 - ....plus a lot more. Take a look at the original link to see the differences
	--				Jan 18, 2017 - Tons of enhancements to support "Autonomous Logging"
    -- Original Reference:  
	--		http://www.mssqltips.com/sqlservertip/2003/simple-process-to-track-and-log-sql-server-stored-procedure-use/
    -- Create date: Apr 06, 2014
    -- Description: Procedure that logs procedure calls
    -- Additional Info:
	--		https://github.com/SQLJana/TSQL_Logger/blob/master/README.md
    --      https://sqljana.wordpress.com/2017/01/09/sql-server-tsql-code-logging-to-table/
    -- Usage:
    /*
 
    --++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
    ---------------
    --Example 0 - A complete example. See the other examples below this example for simpler, step by step understanding
    ---------------
 
        --Drop and recreate if our temporary demo procedures already exist..we will call it later to illustrate
        -------------------------------------------------------------------------------------------------------------
 
        IF object_id('TEMPDB.DBO.#MainProc') IS NOT NULL
            DROP PROCEDURE #MainProc;
        GO
 
        CREATE PROCEDURE #MainProc
        AS
        BEGIN
            ------------------------ Begin: Logging related ------------------------
            --Setting context for application (Do this only once in the entry-point procedure for the whole application/batch)
            --  ***** W A R N I N G *****: DO NOT SET THIS IN EVERY PROCEDURE!!
 
            DECLARE @AppContextInfo VARBINARY(128) =  CAST('My Test Application' AS  VARBINARY(128))
 
            --This information will be associated with the session and will be accessible in SQL Server system views
            SET CONTEXT_INFO @AppContextInfo        
 
            DECLARE @Tag VARCHAR(512) = '<TestApplication> ' +
                                            '<ProcessName>Test process</ProcessName>' +
                                            '<ReportToDate><<REPORTTODATE>></ReportToDate>' +
                                            '<LogId><<LOGID>></LogId>' +
                                            '<RunNumber><<RUNNUMBER>></RunNumber>' +
                                        '</TestApplication>';
            DECLARE @CallerProcId BIGINT = @@PROCID;            
 
            EXEC Logging.SetAttribute @AttributeName='Log.ParentObjectId', @AttributeValue=@CallerProcId, @AttributeType='BIGINT', @AttributeFormat=NULL;
            ------------------------ End: Logging related ------------------------
 
            ------------------------ Begin: Tag ------------------------
            --Replace placeholders in the Tag
            SET @Tag = REPLACE(@Tag, '<<REPORTTODATE>>', CONVERT(VARCHAR,getdate()));
            SET @Tag = REPLACE(@Tag, '<<LOGID>>', 232121);
            --SET @Tag = REPLACE(@Tag, '<<RUNNUMBER>>', NEXT VALUE FOR MySchema.RunNumberSeq);      --MySchema.RunNumberSeq is a pre-defined sequence object
            SET @Tag = REPLACE(@Tag, '<<RUNNUMBER>>', 12);
 
            EXEC Logging.SetAttribute @AttributeName='Log.Tag', @AttributeValue=@Tag, @AttributeType='XML', @AttributeFormat=NULL;
            ------------------------ End: Tag ------------------------
 
            --Call chain 1: Say procedure A calls procedure B, B calls C and so on...as part of Batch process 1
            --Call chain 2: As part of Batch process 2, procedure Z could call procedure B, B calls C and so on...the same chain..
            --However the context is different for both call chains. Different context info should be set for each chain..
            --All log entries made as part of Chain 1 will have the same AppContextInfo in Log
            --...and all log entries made as part of Chain 2 will have a different AppContextInfo in Log even for steps that are common for both chains!
 
            --Pass the tag along to all called procedures...so that log entries will have associated information recorded...and it will be querable later
            --EXEC #LoggingTestProc @CallerTag = @Tag, @CallerProcId = @@PROCID;
 
            --Can forego passing tag and calling proc info and it will be inferred since we SetAttributes for Log.Tag and Log.ParentObjectId
            --      but the ParentObjectId will be this top level procedure for all called procedures in the call tree but it works!
            EXEC #LoggingTestProc
        END
        GO
 
        -------------------------------------------------------------------------------------------------------------
 
        IF object_id('TEMPDB.DBO.#LoggingTestProc') IS NOT NULL
            DROP PROCEDURE #LoggingTestProc;
        GO
 
        CREATE PROCEDURE #LoggingTestProc
        (
            @CallerTag VARCHAR(512) = NULL,
            @CallerProcId BIGINT = NULL
        )
        AS
        BEGIN
 
            ------------------------ Begin: Logging related ------------------------
            DECLARE @DBId BIGINT = DB_ID();
            DECLARE @ObjId BIGINT = @@PROCID
            DECLARE @ParentObjId BIGINT = @CallerProcId     --Set to NULL if no @CallerProcId parameter
            DECLARE @LogId BIGINT;
            DECLARE @Msg VARCHAR(255);
            DECLARE @StepLogId BIGINT;
            DECLARE @StepMsg VARCHAR(255);
            DECLARE @Tag VARCHAR(512) = @CallerTag;         --Set to NULL if no @CallerTag parameter
            ------------------------ End: Logging related ------------------------
 
            BEGIN TRY
                SET @Msg = 'Starting procedure that calculates distance to moon!'
                EXEC StartLog @DatabaseId = @DBId, @Tag = @Tag, @ObjectID = @ObjId, @ParentObjectId = @ParentObjId, @LogType = 'ANONYMOUS BLOCK', @AdditionalInfo = @Msg, @LogId = @LogId OUTPUT        --Log procedure start
 
                ---------------
                ----STEP 1 ----
                ---------------
                --Do something that produces an error
                BEGIN TRY
                    SET @StepMsg = 'Finding the center of gravity on moon'
                    EXEC StartLog @DatabaseId = @DBId, @Tag = @Tag, @ObjectID = @ObjId, @ParentObjectId = @ParentObjId, @LogType = 'STEP', @AdditionalInfo = @StepMsg, @LogId = @StepLogId OUTPUT       --Log step start
 
                    DECLARE @Test INT = 1/0;
 
                    EXEC EndLog @LogID = @StepLogId;    --Log step end
                END TRY
                BEGIN CATCH
                    --Error message is automatically captured in the record for current @StepLogId
                    EXEC EndLog @LogID = @StepLogId;
                END CATCH;
 
                ---------------
                ----STEP 2 ----
                ---------------
                --Do something that completes fine - run dynamic SQL
 
                DECLARE @SQL NVARCHAR(255) = 'select top 1 * from sys.tables'
 
                SET @StepMsg = @SQL
                EXEC StartLog @DatabaseId = @DBId, @Tag = @Tag, @ObjectID = @ObjId, @ParentObjectId = @ParentObjId, @LogType = 'SQL', @AdditionalInfo = @StepMsg, @LogId = @StepLogId OUTPUT        --Log step start
 
                --Pretend that the SQL takes 4 seconds to run
                WAITFOR DELAY '00:00:04';
                --EXEC sp_executesql @SQL
 
                EXEC EndLog @LogID = @StepLogId;    --Log step end
 
                ---------------
                ----STEP 3 ----
                ---------------
                --Unhandled error in this step
 
                SET @StepMsg = @SQL
                EXEC StartLog @DatabaseId = @DBId, @Tag = @Tag, @ObjectID = @ObjId, @LogType = 'SQL', @AdditionalInfo = @StepMsg, @LogId = @StepLogId OUTPUT        --Log step start
 
                -- RAISERROR with severity 11-19 will cause execution to jump to the CATCH block.
                RAISERROR ('Moon stuff is too complex! Giving up.', -- Message text.
                           16, -- Severity.
                           1 -- State.
                           );
 
                EXEC EndLog @LogID = @StepLogId;    --Log step end
 
                EXEC EndLog @LogID = @LogId;        --Log procedure end
 
            END TRY
            BEGIN CATCH
                --Log the error to the procedure log
                IF (@LogId IS NOT NULL)
                    EXEC EndLog @LogId = @LogId;        --Log procedure end
                IF (@StepLogId IS NOT NULL)
                    EXEC EndLog @LogId = @StepLogId;    --Log step end
 
                --Comment/uncomment the version of "Rethrow" based on the version of SQL Server you are using
 
                --Rethrow: SQL Server versions below 2012
                --Get the details of the error--that invoked the CATCH block
                DECLARE
                    @ErMessage NVARCHAR(2048),
                    @ErSeverity INT,
                    @ErState INT
                SELECT
                    @ErMessage = ERROR_MESSAGE(),
                    @ErSeverity = ERROR_SEVERITY(),
                    @ErState = ERROR_STATE();
 
                --Should be able to replace with a single THROW statement in SQL 2012
                RAISERROR (@ErMessage, @ErSeverity, @ErState );
 
                --Rethrow: SQL Server versions 2012 and above
                --THROW;
 
            END CATCH;
        END;
        GO
 
        -------------------------------------------------------------------------------------------------------------
 
        --Test call...
        EXEC #MainProc
 
        --Select from the log to show what was logged
        SELECT * FROM Log ORDER BY 1 DESC
 
        DROP PROCEDURE #LoggingTestProc;
        DROP PROCEDURE #MainProc;
 
    --++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
    ---------------
    --Example 1
    ---------------
    --This is an example of "fire and forget" logging. We do not care about getting back to the logged entry.
        --Example 1.1 - Simplest call
        DECLARE @LogId BIGINT;
        EXEC StartLog @ObjectID = @@PROCID, @LogId = @LogId OUTPUT;
 
        --Example 1.2 - ..+ Status message is included
        DECLARE @LogId BIGINT;
        EXEC StartLog @ObjectID = @@PROCID, @AdditionalInfo = 'Some status message', @LogId = @LogId OUTPUT;
 
        --Example 1.3 - ..+ Status message + Log type is included
        DECLARE @LogId BIGINT;
        EXEC StartLog @ObjectID = @@PROCID, @LogType = 'PROCEDURE', @AdditionalInfo = 'Some status message', @LogId = @LogId OUTPUT;
 
        --Example 1.4 - ..+ ParentObjectID is included
        DECLARE @LogId BIGINT;
        DECLARE @ParentObjectId BIGINT;
 
        SET @ParentObjectId = OBJECT_ID('[CLT2EVE_Transforms].[WorkTransformExclude].[Claims_RetroReceiptChangeHistory]')
        EXEC StartLog @ObjectID = @@PROCID, @ParentObjectID = @ParentObjectId, @LogType = 'PROCEDURE', @AdditionalInfo = 'Some status message', @LogId = @LogId OUTPUT;
 
        --Example 1.4 - ..+ DatbaseID is included
        DECLARE @LogId BIGINT;
        DECLARE @DatabaseId BIGINT;
        DECLARE @ParentObjectId BIGINT;
 
        SET @DatabaseId = DB_ID()
        SET @ParentObjectId = OBJECT_ID('[CLT2EVE_Transforms].[WorkTransformExclude].[Claims_RetroReceiptChangeHistory]')
        EXEC StartLog @DatabaseId = @DatabaseId, @ObjectID = @@PROCID, @ParentObjectID = @ParentObjectId, @LogType = 'PROCEDURE', @AdditionalInfo = 'Some status message', @LogId = @LogId OUTPUT;
 
    --++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
    ---------------
    --Example 2
    ---------------
    --In this example, we set context info once at the beginning of the session and use that to tie all log entries...
    --      This context info, could be different for the same procedure for calls made from different applications!! That is the beauty of this.
    --      The context info can also be changed mid-way through a process if that is the requirement!
 
        DECLARE @LogId BIGINT;
        DECLARE @Msg VARCHAR(255) = 'Process customer records';
        DECLARE @AppContextInfo VARBINARY(128) =  CAST('My Fancy Application' AS  VARBINARY(128))
 
        SET CONTEXT_INFO @AppContextInfo
 
        --Register start
        EXEC StartLog @ObjectID = @@PROCID, @AdditionalInfo = @Msg, @LogId = @LogId OUTPUT;     
 
        --Take a look that log entry's AppContextInfo column!
        SELECT AppContextInfo FROM Log WHERE LogId = @LogId;
 
    --++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
    ---------------
    --Example 3
    ---------------
    --In this example, we want to track the start and end time for the procedure (using OUTPUT variable @LogId)
        DECLARE @LogId BIGINT;
        DECLARE @Msg VARCHAR(255) = 'Process customer records';
 
        --Register start
        EXEC StartLog @ObjectID = @@PROCID, @AdditionalInfo = @Msg, @LogId = @LogId OUTPUT;     
 
        --<<Make the actual call to process customer record here>>
 
        --Register end
        EXEC EndLog @LogID = @LogId;
 
        --At this point, you can select the log entry from Log
        SELECT * FROM Log WHERE LogId = @LogId;
 
    --++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
    ---------------
    --Example 4
    ---------------
    --In this example, we want to track the start and end time for the procedure (using OUTPUT variable @LogId)
    --      + we want to track the start and end time of every step within the procedure..
 
        DECLARE @LogId BIGINT;
        DECLARE @Msg VARCHAR(255) = 'Process customer records';
 
        DECLARE @StepLogId INT;
        DECLARE @StepMsg VARCHAR(255);
 
        --Register ***procedure*** start
        EXEC StartLog @ObjectID = @@PROCID, @AdditionalInfo = @Msg, @LogId = @LogId OUTPUT;     
 
        --Register ***Step 1*** start
        SET @StepMsg = 'About to run step 1 for procedure!'
        EXEC StartLog @ObjectID = @@PROCID, @LogType = 'STEP', @AdditionalInfo = @StepMsg, @LogId = @StepLogId OUTPUT
        --Register ***Step 1*** end
        EXEC EndLog @LogId = @StepLogId;
 
        --Register ***Step 2*** start
        SET @StepMsg = 'About to run step 2 for procedure!'
        EXEC StartLog @ObjectID = @@PROCID, @LogType = 'STEP', @AdditionalInfo = @StepMsg, @LogId = @StepLogId OUTPUT
        --Register ***Step 2*** end
        EXEC EndLog @LogId = @StepLogId;
 
        --Register ***procedure*** end
        EXEC EndLog @LogID = @LogId;
 
        --At this point, you can select the log entry from Log
        SELECT * FROM Log ORDER BY 1 DESC;
 
    --++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
    ---------------
    --Example 5
    ---------------
    --In this example, we record a lot of additional information in a structured manner (XML) in the Tag column that is queryable later
    --      Notice, how "MontlyRetroRun" is used as the root node and later query against the log table uses that
 
        DECLARE @LogId BIGINT;
        DECLARE @Msg VARCHAR(255) = 'Process customer records';
 
        DECLARE @Tag VARCHAR(512) = '<MonthlyRetroRun> ' +
                                        '<ProcessName>MonthlyRetro</ProcessName>' +
                                        '<ReportToDate><<REPORTTODATE>></ReportToDate>' +
                                        '<RetroCessionMonthlyActivityLogId><<RETROCESSIONMONTHLYACTIVITYLOGID>></RetroCessionMonthlyActivityLogId>' +
                                        '<BatchNumber><<BATCHNUMBER>></BatchNumber>' +
                                        '<RunSequenceNumber><<RUNSEQUENCENUMBER>></RunSequenceNumber>' +
                                    '</MonthlyRetroRun>';
 
        ------------------------ Begin: Tag ------------------------
        --Replace placeholders in the Tag
        SET @Tag = REPLACE(@Tag, '<<REPORTTODATE>>', CONVERT(VARCHAR,getdate()));
        SET @Tag = REPLACE(@Tag, '<<RETROCESSIONMONTHLYACTIVITYLOGID>>', 232121);
        SET @Tag = REPLACE(@Tag, '<<BATCHNUMBER>>', LTRIM(STR(11)));
        SET @Tag = REPLACE(@Tag, '<<RUNSEQUENCENUMBER>>', LTRIM(STR(99999)));
 
        SET @Msg = 'Beginning procedure!'
        EXEC StartLog @Tag = @Tag, @ObjectID = @@PROCID, @LogType = 'PROCEDURE', @AdditionalInfo = @Msg, @LogId = @LogId OUTPUT     --Log procedure start
        ------------------------ End: Tag ------------------------  
 
        --At this point, you can select the log entry from Log where
        SELECT r.value('RunSequenceNumber[1]','INT') AS RunNumber,
                r.value('ReportToDate[1]','DateTime') AS ReportToDate,
                l.*
        FROM   Log l
            CROSS APPLY Tag.nodes('/MonthlyRetroRun') AS Runs(r)
 
    --++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    ---------------
    --Example 6
    ---------------
    --In this example, we will see how to work with loops when processing large number of items without cluttering the log!
	--DO NOT do logging inside a loop like this for every loop iteration!
	--(if you do, do it after every x iterations in the loop as this example shows!)

        ------------------------ Begin: Logging related ------------------------
    DECLARE @DBId BIGINT = DB_ID();
    DECLARE @ObjId BIGINT = @@PROCID;
    DECLARE @ParentObjId BIGINT = NULL;     --Set to NULL if no @CallerProcId parameter
    DECLARE @LogId BIGINT;
    DECLARE @Msg VARCHAR(255);
    DECLARE @StepLogId BIGINT;
    DECLARE @StepMsg VARCHAR(255);
    DECLARE @Tag VARCHAR(512) = NULL;         --Set to NULL if no @CallerTag parameter
        ------------------------ End: Logging related ------------------------
 

	-------------------------------------------------------------
	SET @StepMsg = 'Loop through 100000 items';
	------------------------------------------------------------
	EXEC StartLog @DatabaseId = @DBId, @Tag = @Tag, @ObjectID = @ObjId, @ParentObjectId = @ParentObjId, @LogType = 'STEP', @AdditionalInfo = @StepMsg, @LogId = @StepLogId OUTPUT --Log step start
	
	--Create a table and insert into the table
	--------------------------------------------
	CREATE TABLE dbo.T1 (Col1 int, Col2 char(3));  	

	DECLARE @LoopLogId INT
	DECLARE @i int = 0;  
	BEGIN TRAN  

	SET @i = 0;  
	WHILE (@i < 100000)  
	BEGIN  

		--Only log every 10,000 iterations
		IF (@i % 10000) = 0
		BEGIN
			-------------------------------------------------------------
			SET @StepMsg = 'Processing ' + STR(@i) + ' of 100000 items';
			------------------------------------------------------------
	
			EXEC StartLog @DatabaseId = @DBId, @Tag = @Tag, @ObjectID = @ObjId, @ParentObjectId = @ParentObjId, @LogType = 'LOOP', @AdditionalInfo = @StepMsg, @LogId = @LoopLogId OUTPUT
		END;

		INSERT INTO dbo.T1 VALUES (@i, CAST(@i AS char(3)));  
		SET @i += 1;  

		--Close-out the loop entry so that end-time will be recorded for this iteration
		IF (@i % 10000) = 0
		BEGIN
			EXEC EndLog @LogID = @LoopLogId; --Log loop end
		END;
	END;  
	COMMIT TRAN;  

	EXEC EndLog @LogID = @LogId; --End of process

	DROP TABLE dbo.T1


	---------------
    --Example 7
    ---------------
    --In this example, we will see how to work with loops
	
        ------------------------ Begin: Logging related ------------------------
    DECLARE @DBId BIGINT = DB_ID();
    DECLARE @ObjId BIGINT = @@PROCID;
    DECLARE @ParentObjId BIGINT = NULL;     --Set to NULL if no @CallerProcId parameter
    DECLARE @LogId BIGINT;
    DECLARE @Msg VARCHAR(255);
    DECLARE @StepLogId BIGINT;
    DECLARE @StepMsg VARCHAR(255);
    DECLARE @Tag VARCHAR(512) = NULL;         --Set to NULL if no @CallerTag parameter
        ------------------------ End: Logging related ------------------------

	------------------------------------------------------------
	SET @StepMsg = 'Get the list of objects';
	------------------------------------------------------------
	EXEC StartLog @DatabaseId = @DBId, @Tag = @Tag, @ObjectID = @ObjId, @ParentObjectId = @ParentObjId, @LogType = 'STEP', @AdditionalInfo = @StepMsg, @LogId = @StepLogId OUTPUT --Log step start
 
	SELECT *
	INTO #ControlTable
	FROM sys.objects;

	------------------------------------------------------------
	SET @StepMsg = 'Loop through objects and process each';
	------------------------------------------------------------
	EXEC StartLog @DatabaseId = @DBId, @Tag = @Tag, @ObjectID = @ObjId, @ParentObjectId = @ParentObjId, @LogType = 'STEP', @AdditionalInfo = @StepMsg, @LogId = @StepLogId OUTPUT --Log step start
 
	DECLARE @object_id BIGINT = NULL;
	DECLARE @LoopLogId INT = 0;
	
	WHILE EXISTS (SELECT 1 FROM #ControlTable)
	BEGIN
 
		SELECT TOP 1
			@object_id = object_id
		FROM #ControlTable
		ORDER BY Object_Id asc;
 
		------------------------------------------------------------
		SET @StepMsg = 'Process object_id: ' + STR(@object_id);
		------------------------------------------------------------
		EXEC StartLog @DatabaseId = @DBId, @Tag = @Tag, @ObjectID = @ObjId, @ParentObjectId = @ParentObjId, @LogType = 'LOOP', @AdditionalInfo = @StepMsg, @LogId = @LoopLogId OUTPUT --Log step start
 
		PRINT 'Working with object'
 
		EXEC EndLog @LogID = @LoopLogId; --Log loop end

		DELETE FROM #ControlTable
		WHERE object_id = @object_id
	END;

	DROP TABLE #ControlTable

    -------------------------------------------
    --Examples that illustrate working with XML
    -------------------------------------------
 
    --Example 1
    -- Querying XML data column "Tag"
        --If Log.Tag column has the value "<MonthlyRetroRun RunId="1">Test</MonthlyRetroRun>", one could query like this.
        -- Reference: http://thegrayzone.co.uk/blog/2010/03/querying-sql-server-xml-data/
        SELECT r.value('MonthlyRetroRun[1]','varchar(15)')
        FROM   Log
        CROSS APPLY Tag.nodes('/') AS Runs(r)
 
    --Example 2
    -- Somewhat more complex querying of XML data column "Tag"
        UPDATE Log
        SET Tag = '<MonthlyRetroRun ReportToDate="' + CONVERT(VARCHAR(25), CONVERT(datetime, '2014-02-28 00:00:00.000')) + '"> ' +
                                        '<ReportToDate>' + CONVERT(VARCHAR(25), CONVERT(datetime, '2014-02-28 00:00:00.000')) + '</ReportToDate>' +
                                        '<RunNumber>1</RunNumber>' +
                                        '<BatchSize>' + LTRIM(STR(1000)) + '</BatchSize>' +
                                        '<MaxRecords>' + LTRIM(STR(50000)) + '</MaxRecords>' +
                                    '</MonthlyRetroRun>'
        WHERE LogId = 4                         
 
        SELECT r.value('RunNumber[1]','INT') AS RunNumber,
                r.value('ReportToDate[1]','DateTime') AS ReportToDate
        FROM   Log
            CROSS APPLY Tag.nodes('/MonthlyRetroRun') AS Runs(r)
        WHERE LogId = 4                         
 
    --++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
*/
	BEGIN TRY
		DECLARE @StepMsg VARCHAR(255);

		-------------------------------------------------------------
		SET @StepMsg = 'Getting LOG settings';
		------------------------------------------------------------
		
		DECLARE @AppSetting_AppContextInfo		VARCHAR(128);
		DECLARE @AppSetting_IsOn				BIT = 0;
		DECLARE @AppSetting_LogAutonomously		BIT = 1;
		DECLARE @AppSetting_InferTag			BIT = 1;
		DECLARE @AppSetting_InferParentObjectId BIT = 1;
		DECLARE @AppSetting_InferLastSQL		BIT = 0;
		DECLARE @AppSetting_InferError			BIT = 1;
		DECLARE @AppSetting_PrintMessages		BIT = 1;

		--Remove the null byte padding!
		--https://stackoverflow.com/questions/9434662/casting-context-info-to-varchar-and-the-resulting-length
		SELECT @AppSetting_AppContextInfo = REPLACE(CAST(COALESCE(@ContextInfo, CONTEXT_INFO()) AS VARCHAR(128)) COLLATE Latin1_General_100_BIN , 
													0x00, 
													'')

		IF NOT EXISTS(SELECT 1 
					FROM Logging.LogAppMaster
					WHERE AppContextInfo = @AppSetting_AppContextInfo
					)
		BEGIN

			--Use the setting from [DEFAULT] if AppContextInfo does not exist!
			IF EXISTS(SELECT 1 
					FROM Logging.LogAppMaster
					WHERE AppContextInfo = '[DEFAULT]'
					)
			BEGIN
				SET @AppSetting_AppContextInfo = '[DEFAULT]';
			END;
			ELSE
			BEGIN
				SET @AppSetting_AppContextInfo = NULL;
			END;
		END;

		--Priority order - 1) AppContextInfo specific settings 2) [DEFAULT] settings 3) Code settings above if #1 and #2 are missing
		IF (@AppSetting_AppContextInfo IS NOT NULL)
			SELECT
				@AppSetting_IsOn				= IsOn,
				@AppSetting_LogAutonomously		= LogAutonomously,
				@AppSetting_InferTag			= InferTag,
				@AppSetting_InferParentObjectId = InferParentObjectId,
				@AppSetting_InferLastSQL		= InferLastSQL,
				@AppSetting_InferError			= InferError,
				@AppSetting_PrintMessages		= PrintMessages
			FROM
				Logging.LogAppMaster
			WHERE 
				AppContextInfo = @AppSetting_AppContextInfo


		-------------------------------------------------------------
		SET @StepMsg = 'Initializing variables';
		------------------------------------------------------------
	
		-- ================================================================================================
		DECLARE @NewServerName		VARCHAR(100) = COALESCE(@ServerName, @@SERVERNAME)
		DECLARE @NewSPID			INT = COALESCE(@SPID, @@SPID)
		--Connection_Id uniquely identifies a connection like SID+Serial# in Oracle.
		--  This can be used to detect active sessions based on entries in the log table (and possibly kill if needed).
		DECLARE @NewConnectionId	UNIQUEIDENTIFIER = (
														SELECT COALESCE(@ConnectionId, Connection_Id)
														FROM sys.dm_exec_connections
														WHERE session_id = @NewSPID
													);
		DECLARE @NewDatabaseID		BIGINT = COALESCE(@DatabaseId, DB_ID());	
		DECLARE @NewDBName			VARCHAR(100) = DB_NAME(@NewDatabaseID);
		DECLARE @NewContextInfo		VARBINARY(128) = COALESCE(@ContextInfo, CONTEXT_INFO());	--See http://www.sqlservercentral.com/articles/T-SQL/2765/ for more information on how this is used!
		DECLARE @NewTag				VARCHAR(MAX) = @Tag;										--XML not supported on linked server!
		DECLARE @NewObjectName		NVARCHAR(256) = @ObjectName;	
		DECLARE @NewParentObjectId	BIGINT = @ParentObjectId;
		DECLARE @NewParentObjectName NVARCHAR(256) = @ParentObjectName;
		DECLARE @NewErrorLine		INT = @ErrorLine;
		DECLARE @NewErrorMessage	NVARCHAR(4000) = @ErrorMessage;
		DECLARE @NewTranCount		INT = COALESCE(@TranCount, @@TRANCOUNT);
		DECLARE @NewLastSQL			VARCHAR(MAX) = @LastSQL;
 	
		DECLARE @ReturnLogId		INT = 0;
	
		-------------------------------------------------------------
		SET @StepMsg = 'Fetching defaults for parameters';
		------------------------------------------------------------
		IF (@AppSetting_IsOn = 1) 
		BEGIN

			IF (@IsLoopback = 0)
			BEGIN

				-------------------------------------------------------------
				SET @StepMsg = 'Fetching LastSQL using DBCC INPUTBUFFER';
				------------------------------------------------------------			
				IF (@AppSetting_InferLastSQL = 1)
				BEGIN
					IF (@NewLastSQL IS NULL)
					BEGIN
						--Create a global temporary table to hold DBCC InputBuffer output
						-- (creating as global one-time to avoid incurring the table creation cost everytime a log entry is made)
						IF OBJECT_ID('tempdb..##Inputbuffer') IS NULL
							CREATE TABLE ##Inputbuffer(
								EventType NVARCHAR(30) NULL,
								Parameters INT NULL,
								EventInfo NVARCHAR(MAX) NULL
							);
						ELSE
							--Clear off stale data if any!
							TRUNCATE TABLE ##InputBuffer;

						--Record the last SQL statement
						INSERT ##Inputbuffer
						EXEC('DBCC INPUTBUFFER(@@SPID) WITH NO_INFOMSGS');

						SELECT TOP 1 @NewLastSQL = EventInfo
						FROM ##Inputbuffer;
					END;
				END;
	

				-------------------------------------------------------------
				SET @StepMsg = 'Derive the object name';
				------------------------------------------------------------			
				-- ..as object ids get changed if objects are recreated and hence logs become useless
			
				IF (@NewObjectName IS NULL)
				BEGIN
					IF (@ObjectID IS NOT NULL)
					BEGIN
						--If ObjectId is less than zero, it is a temporary object that exists in tempdb!
						IF @ObjectID < 0
						BEGIN 
							SET @NewObjectName = COALESCE('tempdb'
															+ '.' + QUOTENAME(OBJECT_SCHEMA_NAME(@ObjectID, db_id('tempdb')))
															+ '.' + QUOTENAME(OBJECT_NAME(@ObjectID, db_id('tempdb')))
														, ERROR_PROCEDURE());
						END;
						ELSE
						BEGIN
							SET @NewObjectName = COALESCE(QUOTENAME(DB_NAME(@NewDatabaseID))
															+ '.' + QUOTENAME(OBJECT_SCHEMA_NAME(@ObjectID, @NewDatabaseID))
															+ '.' + QUOTENAME(OBJECT_NAME(@ObjectID, @NewDatabaseID))
														, ERROR_PROCEDURE());
						END;
					END;
				END;

				-------------------------------------------------------------
				SET @StepMsg = 'Use the Tag stored globally if an empty tag is passed in';
				------------------------------------------------------------			
 				IF (@AppSetting_InferTag = 1)
				BEGIN
					IF (@NewTag IS NULL)
					BEGIN
						DECLARE @TempTag SQL_VARIANT = NULL;
						EXEC GetAttribute @AttributeName='Log.Tag', @AttributeValue=@TempTag OUTPUT, @AttributeType=NULL, @AttributeFormat=NULL, @IgnoreIfAttributeIsMissing=1;
 
						SET @NewTag = CONVERT(VARCHAR(MAX), @TempTag);
					END;
				END;
 
 				-------------------------------------------------------------
				SET @StepMsg = 'Use the ParentObjectId stored globally if an empty tag is passed in';
				------------------------------------------------------------			
				IF (@NewParentObjectName IS NULL)
				BEGIN
					IF ( @NewParentObjectId IS NULL)
					BEGIN
						IF (@AppSetting_InferParentObjectId = 1)
						BEGIN
							DECLARE @TempParentObjectId SQL_VARIANT = NULL;
							EXEC GetAttribute @AttributeName='Log.ParentObjectId', @AttributeValue=@TempParentObjectId OUTPUT, @AttributeType=NULL, @AttributeFormat=NULL, @IgnoreIfAttributeIsMissing=1;
 
							SET @NewParentObjectId = CONVERT(BIGINT, @TempParentObjectId);
						END;
					END;

					IF ( @NewParentObjectId IS NOT NULL)
					BEGIN
						--If ObjectId is less than zero, it is a temporary object that exists in tempdb!
						IF @NewParentObjectId < 0
						BEGIN 
							SET @NewParentObjectName = COALESCE('tempdb'
														+ '.' + QUOTENAME(OBJECT_SCHEMA_NAME(@NewParentObjectId, db_id('tempdb')))
														+ '.' + QUOTENAME(OBJECT_NAME(@NewParentObjectId, db_id('tempdb')))
												, ERROR_PROCEDURE());
						END;
						ELSE
						BEGIN
							SET @NewParentObjectName = COALESCE(QUOTENAME(DB_NAME(@NewDatabaseID))
														+ '.' + QUOTENAME(OBJECT_SCHEMA_NAME(@NewParentObjectId, @NewDatabaseID))
														+ '.' + QUOTENAME(OBJECT_NAME(@NewParentObjectId, @NewDatabaseID))
												, ERROR_PROCEDURE());
						END;

					END;
				END;
 
			

 				-------------------------------------------------------------
				SET @StepMsg = 'Infer error if needed!';
				------------------------------------------------------------			
				IF (@AppSetting_InferError = 1)
				BEGIN
					SET @NewErrorLine = COALESCE(@ErrorLine, ERROR_LINE());
					SET @NewErrorMessage = COALESCE(@ErrorMessage, ERROR_MESSAGE());
				END;

			END;


			-------------------------------------------------------------
			SET @StepMsg = 'Log to table (if not inside a transaction (or) if looping back (or) not logging autonomously)';
			------------------------------------------------------------						
			IF (
					--If nested transaction but we should not log autonomously (i.e., logging is transactional too)
					((@NewTranCount > 0) AND (@AppSetting_LogAutonomously = 0))
					OR
					--If not a nested transaction we dont care about logging autonomously
					(@NewTranCount = 0)
					OR
					--If we are looping back, we need to do this INSERT ..but at that point we will be on a separate connection!
					(@IsLoopback = 1)
				)
			BEGIN
				--Create a new entry in the log table
				INSERT Log (
					ServerName
					,SPID
					,ConnectionId
					,DatabaseName
					,AppContextInfo
					,Tag
					,ObjectID
					,ParentObjectID
					,LogType
					,ObjectName
					,ParentObjectName
					,EndDateTime
					,RowsAffected
					,ErrorLine
					,ErrorMessage
					,AdditionalInfo
					,TransactionCount
					,LastSQL
					)
				SELECT @NewServerName
					,@NewSPID
					,@NewConnectionId
					,@NewDBName
					,@NewContextInfo
					,@NewTag
					,@ObjectID
					,@NewParentObjectID
					,@LogType
					,@NewObjectName
					,@NewParentObjectName
					,NULL
					,@RowsAffected      --Caution on what you pass in for @RowsAffected. You do not want to record rowcount for previous operation (using @@ROWCOUNT) rather than the one currenly being logged
					,@NewErrorLine
					,@NewErrorMessage
					,@AdditionalInfo
					,@NewTranCount
					,@NewLastSQL;

				SET @ReturnLogId = @@IDENTITY;
			END
	
			-------------------------------------------------------------
			SET @StepMsg = 'Loopback - if (we are not already on a loopback and logging autonomously)!';
			------------------------------------------------------------						
			IF (
					((@NewTranCount > 0) AND (@AppSetting_LogAutonomously = 1))
					AND 
					(@IsLoopback = 0)				
				)
			BEGIN
		
				EXEC loopback.Util.Logging.StartLog 
					@ServerName = @NewServerName
					,@SPID = @NewSPID
					,@ConnectionId = @NewConnectionId
					,@DatabaseId = @NewDatabaseID
					,@ContextInfo = @NewContextInfo
					,@Tag = @NewTag					--XML not supported in Linked Servers
					,@ObjectId = @ObjectID
					,@ParentObjectId = @NewParentObjectID
					,@LogType = @LogType
					,@ObjectName = @NewObjectName
					,@ParentObjectName = @NewParentObjectName
					,@RowsAffected = @RowsAffected
					,@LogID = @ReturnLogID OUTPUT
					,@AdditionalInfo = @AdditionalInfo
					--We do not want to recursively keep inserting and need a way to know if it was loopback so that we insert just once.
					,@IsLoopback = 1
					,@ErrorLine = @NewErrorLine
					,@ErrorMessage = @NewErrorMessage			
					,@TranCount = @NewTranCount
					,@LastSQL = @NewLastSQL;		
			END;
 
			--Set the OUTPUT parameter @LogId
			SET @LogID = @ReturnLogID; 

			IF (@AppSetting_PrintMessages = 1)
			BEGIN
				PRINT CONVERT(VARCHAR, GETDATE()) + ': ' + LTRIM(STR(@LogID)) + ' - ' + COALESCE(@NewObjectName,'[NONE]') + ' - ' + COALESCE(@AdditionalInfo,'[N/A]');
			END;

		END; --IF (@AppSetting_IsOn = 1) 

	END TRY
	BEGIN CATCH
		--Add a clue about where the error happened to the message before raising!
		DECLARE @ErMessage NVARCHAR(4000),
				@ErSeverity INT, 
				@ErState INT;  
  
		SET @ErMessage = 'StartLog: Error when running step: ' + @StepMsg + ' - ' + ERROR_MESSAGE();
		SET @ErSeverity = ERROR_SEVERITY();
		SET @ErState = ERROR_STATE(); 

        RAISERROR (@ErMessage, @ErSeverity, @ErState );

	END CATCH;

END;
GO
PRINT N'Creating [Logging].[EndLog]...';


GO
CREATE PROCEDURE [Logging].[EndLog]
	 @LogID         BIGINT
	,@RowsAffected  INT = NULL
	,@ErrorLine		INT = NULL
	,@ErrorMessage	NVARCHAR(4000) = NULL
AS
BEGIN
 
-- =============================================================================================
-- Original:    Original idea from Aaron Bertrand
-- Created By: Jana Sattainathan
--              Apr 07, 2014 - Created this procedure that will help track duration of activities (by closing an open log entry)
-- Source:  http://www.mssqltips.com/sqlservertip/2003/simple-process-to-track-and-log-sql-server-stored-procedure-use/
-- Create date: Apr 06, 2014
-- Description: Procedure that ends an open log entry in ProcedureLog table
-- Usage:
/*
    --Example 1
        DECLARE @LogId INT;
        DECLARE @Tag XML = '<MonthlyRetroRun RunId="1">Test</MonthlyRetroRun>';
        DECLARE @Msg VARCHAR(255) = 'Process customer records';
        EXEC StartLog @Tag = @Tag, @ObjectID = @@PROCID, @AdditionalInfo = @Msg, @LogId = @LogId OUTPUT;
        EXEC EndLog @LogID = @LogId;
 
        SELECT * FROM Log
 
*/
-- Reference:
--  Working with XML - http://technet.microsoft.com/en-us/library/bb522510.aspx
--
-- ================================================================================================
    DECLARE @NewRowsAffected INT = COALESCE(@RowsAffected, @@ROWCOUNT);
	DECLARE @NewEndDateTime DATETIME = GETDATE();
	DECLARE @NewErrorLine INT = @ErrorLine;
	DECLARE @NewErrorMessage NVARCHAR(4000) = @ErrorMessage;

	BEGIN TRY
		DECLARE @StepMsg VARCHAR(255);

		--If the @LogID is NULL or zero, dont do anything!
		IF COALESCE(@LogID, 0) > 0 
		BEGIN
			-------------------------------------------------------------
			SET @StepMsg = 'Getting LOG settings';
			------------------------------------------------------------
			DECLARE @AppSetting_AppContextInfo		VARCHAR(128) = CONTEXT_INFO();
			DECLARE @AppSetting_IsOn				BIT = 1;
			DECLARE @AppSetting_LogAutonomously		BIT = 1;
			DECLARE @AppSetting_InferTag			BIT = 1;
			DECLARE @AppSetting_InferParentObjectId BIT = 1;
			DECLARE @AppSetting_InferLastSQL		BIT = 0;
			DECLARE @AppSetting_InferError			BIT = 1;
			DECLARE @AppSetting_PrintMessages		BIT = 1;

			IF NOT EXISTS(SELECT 1 
						FROM Logging.LogAppMaster
						WHERE AppContextInfo = @AppSetting_AppContextInfo
						)
			BEGIN
				--Use the setting from [DEFAULT] if AppContextInfo does not exist!
				IF EXISTS(SELECT 1 
						FROM Logging.LogAppMaster
						WHERE AppContextInfo = '[DEFAULT]'
						)
				BEGIN
					SET @AppSetting_AppContextInfo = '[DEFAULT]';
				END;
				ELSE
				BEGIN
					SET @AppSetting_AppContextInfo = NULL;
				END;
			END;

			--Priority order - 1) AppContextInfo specific settings 2) [DEFAULT] settings 3) Code settings above if #1 and #2 are missing
			IF (@AppSetting_AppContextInfo IS NOT NULL)
				SELECT
					@AppSetting_IsOn				= IsOn,
					@AppSetting_LogAutonomously		= LogAutonomously,
					@AppSetting_InferTag			= InferTag,
					@AppSetting_InferParentObjectId = InferParentObjectId,
					@AppSetting_InferLastSQL		= InferLastSQL,
					@AppSetting_InferError			= InferError,
					@AppSetting_PrintMessages		= PrintMessages
				FROM
					Logging.LogAppMaster
				WHERE 
					AppContextInfo = @AppSetting_AppContextInfo;
				

			IF (@AppSetting_IsOn = 1) 
			BEGIN
				-------------------------------------------------------------
				SET @StepMsg = 'Infer error if needed!';
				------------------------------------------------------------			
				IF (@AppSetting_InferError = 1)
				BEGIN
					SET @NewErrorLine = COALESCE(@ErrorLine, ERROR_LINE());
					SET @NewErrorMessage = COALESCE(@ErrorMessage, ERROR_MESSAGE());
				END;
								

				-------------------------------------------------------------
				SET @StepMsg = 'Close out log entry';
				------------------------------------------------------------								
				IF (@AppSetting_LogAutonomously = 0)
				BEGIN
					UPDATE Logging.Log
					SET EndDateTime = @NewEndDateTime, --DATEDIFF(S, LogDate, GETDATE()),
						RowsAffected = @NewRowsAffected,
						ErrorLine = @NewErrorLine,
						ErrorMessage = @NewErrorMessage
					WHERE LogId = @LogID;
 			
				END;
				ELSE
				BEGIN
					EXEC ('UPDATE Util.Logging.Log
							SET EndDateTime = ?,
								RowsAffected = ?,
								ErrorLine = ?,
								ErrorMessage = ?
							WHERE LogId = ?', @NewEndDateTime, @NewRowsAffected, @NewErrorLine, @NewErrorMessage, @LogID) AT [LOOPBACK];

				END;

				-------------------------------------------------------------
				SET @StepMsg = 'Pring log entry close';
				------------------------------------------------------------	

				IF (@AppSetting_PrintMessages = 1)
				BEGIN
					PRINT CONVERT(VARCHAR,GETDATE()) + ': ' + LTRIM(STR(@LogID)) + ' - Call ended';
				END;

			END;		--IF (@AppSetting_IsOn = 1) 
		END;	--IF COALESCE(@LogID, 0) > 0 

	END TRY
	BEGIN CATCH
		--Add a clue about where the error happened to the message before raising!
		DECLARE @ErMessage NVARCHAR(4000),
				@ErSeverity INT, 
				@ErState INT;  
  
		SET @ErMessage = 'EndLog: Error when running step: ' + @StepMsg + ' - ' + ERROR_MESSAGE();
		SET @ErSeverity = ERROR_SEVERITY();
		SET @ErState = ERROR_STATE(); 

        RAISERROR (@ErMessage, @ErSeverity, @ErState );
	END CATCH;
	
END;
GO


USE Util
GO
--------------------------------------------------------
--Default seed values for [Logging].[LogAppMaster]
--------------------------------------------------------
INSERT INTO [Logging].[LogAppMaster] ([AppContextInfo], [IsOn], [LogAutonomously], [InferTag], [InferParentObjectId], [InferLastSQL], [InferError], [PrintMessages]) 
VALUES (N'[DEFAULT]', 1, 1, 1, 1, 0, 1, 0);


----------------------------
--Linked server to loopback
----------------------------

EXEC sp_addlinkedserver @server = N'loopback',@srvproduct = N' ',@provider = N'SQLNCLI', @datasrc = @@SERVERNAME

GO

EXEC sp_serveroption loopback,N'remote proc transaction promotion','FALSE'

GO

EXEC sp_serveroption loopback,N'RPC OUT','TRUE' --Enable RPC to the given server.
GO

